// =============================================================================
// server.js - 應用程式主入口文件 (已更新為 Docker Compose 環境)
// 負責啟動 Express 伺服器、連接 MongoDB、設定中介軟體和路由
// =============================================================================

const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const urlController = require('./controllers/urlController'); // 引入 URL 控制器
const adminController = require('./controllers/adminController'); // 引入 Admin 控制器
const feedbackController = require('./controllers/feedbackController'); // 引入新的 Feedback 控制器

const app = express();
const PORT = process.env.PORT || 3000;
// *** Docker Compose 環境下，MongoDB 服務名稱為 'mongodb' ***
const DB_URI = 'mongodb://mongodb:27017/shorturl_db';

// 連接 MongoDB 資料庫
mongoose.connect(DB_URI, { serverSelectionTimeoutMS: 30000 }) // 增加超時設定
    .then(() => console.log('MongoDB connected successfully'))
    .catch(err => console.error('MongoDB connection error:', err));

// 設定 Express 中介軟體
app.use(express.json()); // 解析 JSON 格式的請求體
app.use(express.urlencoded({ extended: true })); // 解析 URL-encoded 格式的請求體
app.use(express.static(path.join(__dirname, 'public'))); // 提供靜態檔案 (例如: index.html, script.js, CSS)

// =============================================================================
// 路由定義 (重要：特定路由應在通用路由之前)
// =============================================================================

// GET /admin
// 用於渲染後台管理介面
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// GET /verify/:shortId
// 用於渲染公開密碼輸入頁面
app.get('/verify/:shortId', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'password_prompt.html'));
});

// API 路由 - 縮網址
app.post('/api/shorten', urlController.shortenUrl);

// API 路由 - 驗證公開密碼並進行轉址
app.post('/api/verify-password/:shortId', urlController.verifyPublicPassword);

// API 路由 - 後台登入驗證 (縮網址 ID 和管理密碼)
app.post('/api/admin/login', adminController.authenticateAdmin);

// API 路由 - 獲取指定短網址的詳細資訊 (流量分析數據)，需要管理密碼驗證
app.post('/api/admin/details/:shortId', adminController.getAdminUrlDetails);

// API 路由 - 更新指定短網址的目標長網址，需要管理密碼驗證
app.put('/api/admin/update/:shortId', adminController.updateTargetUrl);

// API 路由 - 提交意見回饋
app.post('/api/feedback', feedbackController.submitFeedback);

// GET /
// 應用程式的根路由，導向到前端的 index.html 頁面 (縮網址主頁)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// GET /:shortId
// 用於處理短網址的導向請求，會將使用者重新導向到原始的長網址
// 如果有公開密碼保護，會導向密碼輸入頁面
// 這個路由必須放在所有其他特定路由的**最後面**
app.get('/:shortId', urlController.redirectToLongUrl);


// 啟動伺服器
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

// =============================================================================
// models/Url.js - MongoDB 資料模型定義
// 定義了短網址及其相關點擊數據的資料結構
// =============================================================================

// 這個部分應該放在 models/Url.js 檔案中
const mongoose = require('mongoose');
const shortid = require('shortid'); // 引入 shortid 庫

// 設定 shortid 的字元集和長度
// 注意：shortid 庫本身沒有直接設定固定長度的方法，我們透過 Mongoose Schema 進行驗證
shortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_');

// 定義單次點擊的資料結構
const clickSchema = new mongoose.Schema({
    timestamp: { type: Date, default: Date.now }, // 點擊時間
    ipAddress: String, // 點擊者的 IP 位址
    country: String, // 國家
    region: String, // 區域/省份
    city: String, // 城市
    os: String, // 作業系統 (e.g., Windows 10, iOS 15)
    deviceType: String, // 裝置類型 (e.g., desktop, mobile, tablet)
    browser: String, // 瀏覽器 (e.g., Chrome 100, Safari 15)
    referrer: String, // 流量來源網址
});

// 定義短網址的資料結構
const urlSchema = new mongoose.Schema({
    longUrl: {
        type: String,
        required: true // 長網址是必填的
    },
    shortId: {
        type: String,
        required: true,
        unique: true, // 短 ID 必須是唯一的
        minlength: 6, // 自動生成 ID 最小長度
        maxlength: 6 // 自動生成 ID 最大長度
    },
    customShortId: { // 允許使用者自訂短網址路徑
        type: String,
        unique: true,
        sparse: true, // 允許為空，但如果存在則必須唯一
        minlength: 1, // 自訂 ID 最小長度
        maxlength: 10 // 自訂 ID 最大長度
    },
    createdAt: {
        type: Date,
        default: Date.now // 創建時間預設為當前時間
    },
    expiresAt: Date, // 短網址的到期時間 (可選)
    password: String, // 公開密碼保護 (可選)
    managementPassword: { // 新增：後台管理密碼
        type: String,
        required: true,
        select: false // 預設不返回此欄位，增加安全性
    },
    totalClicks: {
        type: Number,
        default: 0 // 總點擊數，預設為 0
    },
    clicks: [clickSchema] // 儲存所有點擊的詳細資訊，是一個 ClickSchema 陣列
});

const Url = mongoose.model('Url', urlSchema); // 建立 Url 模型
module.exports = Url; // 實際檔案中會這樣導出

// =============================================================================
// models/Feedback.js - MongoDB 資料模型定義
// 定義了意見回饋的資料結構 (新檔案)
// =============================================================================

// 這個部分應該放在 models/Feedback.js 檔案中
const mongoose = require('mongoose');

const feedbackSchema = new mongoose.Schema({
    message: {
        type: String,
        required: true,
        trim: true,
        maxlength: 500 // 限制意見回饋訊息長度
    },
    contactInfo: { // 使用者可選填的聯絡資訊
        type: String,
        trim: true,
        maxlength: 100
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

const Feedback = mongoose.model('Feedback', feedbackSchema);
module.exports = Feedback;


// =============================================================================
// controllers/urlController.js - 處理 URL 相關邏輯 (公開部分)
// 包含縮網址和公開轉址/密碼驗證的功能
// =============================================================================

// 這個部分應該放在 controllers/urlController.js 檔案中
const Url = require('../models/Url');
const validator = require('validator');
// const shortid = require('shortid'); // 不再直接用於生成 ID，但如果其他地方有用到可以保留
const crypto = require('crypto'); // 用於生成更安全的管理密碼和短 ID
const useragent = require('useragent-parser');
const geoip = require('geoip-lite');

// 輔助函數：生成隨機安全字串作為管理密碼
const generateSecurePassword = (length = 16) => {
    return crypto.randomBytes(Math.ceil(length / 2)).toString('hex').slice(0, length);
};

// 輔助函數：生成固定長度的隨機短 ID
const generateFixedLengthShortId = (length = 6) => {
    // 使用 base64url 編碼可以生成 URL-safe 的字元
    // 每個字元需要約 6 bits，所以 length * 3/4 決定需要的位元組數
    // 為了保險起見，可以稍微多生成一些位元組，然後截取
    const bytesNeeded = Math.ceil(length * 0.75); // 每個 base64url 字元代表 6 位元，所以 4 個字元代表 3 位元組
    const randomBytes = crypto.randomBytes(bytesNeeded + 2); // 多生成一些，確保能截取到足夠的長度
    return randomBytes.toString('base64url').slice(0, length);
};


// 輔助函數：獲取 IP 和地理位置資訊
const getGeoInfo = (ip) => {
    if (!ip) return {};
    const ipv4 = ip.includes('::ffff:') ? ip.split('::ffff:')[1] : ip;
    const geo = geoip.lookup(ipv4);
    return {
        country: geo ? geo.country : 'Unknown',
        region: geo ? geo.region : 'Unknown',
        city: geo ? geo.city : 'Unknown',
    };
};

// 輔助函數：獲取 User-Agent 資訊
const getUserAgentInfo = (userAgentHeader) => {
    if (!userAgentHeader) return {};
    const agent = useragent.parse(userAgentHeader);
    return {
        os: agent.os.name ? `${agent.os.name} ${agent.os.version || ''}`.trim() : 'Unknown',
        deviceType: agent.device.type || 'Unknown',
        browser: agent.browser.name ? `${agent.browser.name} ${agent.browser.version || ''}`.trim() : 'Unknown',
    };
};

// 縮網址
exports.shortenUrl = async (req, res) => {
    const { longUrl, customShortId, expiresAt, password } = req.body;

    if (!longUrl || !validator.isURL(longUrl, { require_protocol: true })) {
        return res.status(400).json({ error: 'Invalid URL provided. Please include http:// or https://' });
    }

    // 驗證 customShortId 長度 (前端已驗證，後端再驗證一次確保安全)
    if (customShortId && (customShortId.length > 10 || customShortId.length === 0)) {
        return res.status(400).json({ error: 'Custom short ID must be between 1 and 10 characters long.' });
    }

    try {
        let shortIdToUse;
        if (customShortId) {
            const existingCustomUrl = await Url.findOne({ customShortId });
            if (existingCustomUrl) {
                return res.status(409).json({ error: 'Custom short ID is already in use.' });
            }
            shortIdToUse = customShortId;
        } else {
            // 自動生成 6 位元短 ID，並確保唯一性
            let isUnique = false;
            let generatedId;
            const MAX_RETRIES = 5; // 防止無限迴圈，設定最大重試次數
            let retries = 0;

            while (!isUnique && retries < MAX_RETRIES) {
                generatedId = generateFixedLengthShortId(6); // 生成 6 個字元的 ID
                const existingUrl = await Url.findOne({ shortId: generatedId });
                if (!existingUrl) {
                    isUnique = true;
                }
                retries++;
            }

            if (!isUnique) {
                return res.status(500).json({ error: 'Failed to generate a unique short ID after multiple attempts. Please try again.' });
            }
            shortIdToUse = generatedId;
        }

        const managementPassword = generateSecurePassword(); // 生成管理密碼

        const newUrl = new Url({
            longUrl,
            shortId: shortIdToUse,
            customShortId: customShortId || undefined,
            expiresAt: expiresAt ? new Date(expiresAt) : undefined,
            password: password || undefined, // 公開訪問密碼
            managementPassword: managementPassword, // 後台管理密碼
        });

        await newUrl.save(); // Mongoose 會在此處根據 schema 驗證 shortId 和 customShortId 的長度

        res.status(201).json({
            shortUrl: `${req.protocol}://${req.get('host')}/${newUrl.shortId}`,
            adminUrl: `${req.protocol}://${req.get('host')}/admin`, // 導向後台登入頁面
            shortId: newUrl.shortId, // 返回短網址ID
            managementPassword: managementPassword // 返回管理密碼
        });

    } catch (err) {
        console.error('Error shortening URL:', err);
        if (err.code === 11000) {
            return res.status(409).json({ error: 'A short ID conflict occurred. Please try again or choose a different custom ID.' });
        }
        // 處理 Mongoose 驗證錯誤
        if (err.name === 'ValidationError') {
            const errors = Object.keys(err.errors).map(key => err.errors[key].message);
            return res.status(400).json({ error: `Validation failed: ${errors.join(', ')}` });
        }
        res.status(500).json({ error: 'Server error during URL shortening.' });
    }
};

// 導向長網址並記錄點擊 (處理公開密碼保護)
exports.redirectToLongUrl = async (req, res) => {
    const { shortId } = req.params;
    const ipAddress = req.headers['x-forwarded-for'] ? req.headers['x-forwarded-for'].split(',')[0].trim() : req.connection.remoteAddress;
    const userAgentHeader = req.headers['user-agent'];
    const referrer = req.headers['referer'] || 'Direct';

    try {
        const urlEntry = await Url.findOne({ shortId });

        if (!urlEntry) {
            return res.status(404).send('Short URL not found.');
        }

        // 檢查是否過期
        if (urlEntry.expiresAt && urlEntry.expiresAt < new Date()) {
            return res.status(410).send('Short URL has expired.');
        }

        // 如果有公開密碼保護，導向密碼輸入頁面
        if (urlEntry.password) {
            // 導向到一個專門的密碼輸入頁面，並將 shortId 傳遞過去
            return res.redirect(`/verify/${shortId}`);
        }

        // 沒有密碼保護或密碼已驗證，記錄點擊並轉址
        const geoInfo = getGeoInfo(ipAddress);
        const uaInfo = getUserAgentInfo(userAgentHeader);

        urlEntry.clicks.push({
            ipAddress,
            ...geoInfo,
            ...uaInfo,
            referrer,
        });
        urlEntry.totalClicks++;
        await urlEntry.save();

        res.redirect(urlEntry.longUrl);

    } catch (err) {
            // 由於這裡是一個通用路由，如果發生錯誤，應避免無限重導向或崩潰
            console.error('Error redirecting URL:', err);
            // 可以導向一個錯誤頁面，而不是直接發送 500
            res.status(500).send('An unexpected server error occurred.');
    }
};

// 驗證公開密碼並轉址
exports.verifyPublicPassword = async (req, res) => {
    const { shortId } = req.params;
    const { password } = req.body; // 從表單提交的密碼

    try {
        // 為了獲取 password 欄位，需要明確指定 .select('+password')
        const urlEntry = await Url.findOne({ shortId }).select('+password');

        if (!urlEntry) {
            return res.status(404).json({ error: 'Short URL not found.' });
        }

        if (!urlEntry.password || urlEntry.password !== password) { // 簡單的密碼比對
            return res.status(401).json({ error: 'Incorrect password.' });
        }

        // 密碼驗證成功，記錄點擊並轉址
        const ipAddress = req.headers['x-forwarded-for'] ? req.headers['x-forwarded-for'].split(',')[0].trim() : req.connection.remoteAddress;
        const userAgentHeader = req.headers['user-agent'];
        const referrer = req.headers['referer'] || 'Direct';

        const geoInfo = getGeoInfo(ipAddress);
        const uaInfo = getUserAgentInfo(userAgentHeader);

        urlEntry.clicks.push({
            ipAddress,
            ...geoInfo,
            ...uaInfo,
            referrer,
        });
        urlEntry.totalClicks++;
        await urlEntry.save();

        res.json({ success: true, redirectUrl: urlEntry.longUrl }); // 返回成功和轉址 URL

    } catch (err) {
        console.error('Error verifying public password:', err);
        res.status(500).json({ error: 'Server error during password verification.' });
    }
};

// =============================================================================
// controllers/adminController.js - 處理後台管理介面的邏輯
// 包含後台登入驗證、獲取詳細數據和更新目標網址
// =============================================================================

// 這個部分應該放在 controllers/adminController.js 檔案中
// const Url = require('../models/Url'); // 實際檔案中會這樣引入

// 輔助函數：驗證管理密碼
const authenticateAdminMiddleware = async (req, res, next) => {
    // 密碼可能來自 req.body (POST) 或 req.query (GET，但這裡已將 GET 請求改為 POST)
    const { shortId } = req.params; // 來自 URL 參數
    const { managementPassword } = req.body; // 來自請求體

    if (!shortId || !managementPassword) {
        return res.status(400).json({ error: 'Short ID and management password are required.' });
    }

    try {
        // 為了獲取 managementPassword 欄位，需要明確指定 .select('+managementPassword')
        const urlEntry = await Url.findOne({ shortId }).select('+managementPassword');

        if (!urlEntry || urlEntry.managementPassword !== managementPassword) {
            return res.status(401).json({ error: 'Invalid Short ID or management password.' });
        }

        // 驗證成功，將 urlEntry 附加到 req 物件，以便後續的控制器使用
        req.urlEntry = urlEntry;
        next(); // 繼續執行下一個中介軟體或路由處理函數
    } catch (err) {
        console.error('Admin authentication error:', err);
        res.status(500).json({ error: 'Server error during authentication.' });
    }
};

// 後台登入驗證 (簡單的驗證，只返回成功訊息)
exports.authenticateAdmin = authenticateAdminMiddleware; // 這裡直接使用中介軟體進行驗證

// 獲取短網址的詳細資訊 (流量分析用，需要管理密碼驗證)
exports.getAdminUrlDetails = [
    authenticateAdminMiddleware, // 先進行管理密碼驗證
    async (req, res) => {
        const urlEntry = req.urlEntry; // 從中介軟體獲取已驗證的 urlEntry

        try {
            // 為了避免返回過大的數據，這裡只返回最近的點擊紀錄
            const analysis = {
                longUrl: urlEntry.longUrl,
                totalClicks: urlEntry.totalClicks,
                createdAt: urlEntry.createdAt,
                expiresAt: urlEntry.expiresAt,
                passwordProtected: !!urlEntry.password,
                recentClicks: urlEntry.clicks.slice(-50).reverse(), // 顯示最近 50 筆點擊，並倒序排列
                // 這裡可以加入更多聚合分析數據，例如：
                // 國家分佈
                countryDistribution: urlEntry.clicks.reduce((acc, click) => {
                    const country = click.country || 'Unknown';
                    acc[country] = (acc[country] || 0) + 1;
                    return acc;
                }, {}),
                // 裝置類型分佈
                deviceTypeDistribution: urlEntry.clicks.reduce((acc, click) => {
                    const deviceType = click.deviceType || 'Unknown';
                    acc[deviceType] = (acc[deviceType] || 0) + 1;
                    return acc;
                }, {}),
                // 作業系統分佈
                osDistribution: urlEntry.clicks.reduce((acc, click) => {
                    const os = click.os || 'Unknown';
                    acc[os] = (acc[os] || 0) + 1;
                    return acc;
                }, {}),
                // 瀏覽器分佈
                browserDistribution: urlEntry.clicks.reduce((acc, click) => {
                    const browser = click.browser || 'Unknown';
                    acc[browser] = (acc[browser] || 0) + 1;
                    return acc;
                }, {}),
                // 來源分佈
                referrerDistribution: urlEntry.clicks.reduce((acc, click) => {
                    const referrer = click.referrer || 'Direct';
                    // 簡化 referrer，只取域名
                    let domain = referrer;
                    try {
                        const url = new URL(referrer);
                        domain = url.hostname;
                    } catch (e) {
                        // 無效 URL，保持原樣或標記為 Direct
                    }
                    acc[domain] = (acc[domain] || 0) + 1;
                    return acc;
                }, {}),
            };

            res.json(analysis);

        } catch (err) {
            console.error('Error fetching admin URL details:', err);
            res.status(500).json({ error: 'Server error during fetching admin URL details.' });
        }
    }
];

// 更新目標網址 (需要管理密碼驗證)
exports.updateTargetUrl = [
    authenticateAdminMiddleware, // 先進行管理密碼驗證
    async (req, res) => {
        const urlEntry = req.urlEntry; // 從中介軟體獲取已驗證的 urlEntry
        const { newLongUrl, newPassword, newExpiresAt } = req.body; // 允許更新多個欄位

        if (!newLongUrl || !validator.isURL(newLongUrl, { require_protocol: true })) {
            return res.status(400).json({ error: 'Invalid new URL provided. Please include http:// or https://' });
        }

        try {
            urlEntry.longUrl = newLongUrl;
            if (newPassword !== undefined) { // 允許清空密碼
                urlEntry.password = newPassword === '' ? undefined : newPassword;
            }
            if (newExpiresAt !== undefined) { // 允許清空到期日
                urlEntry.expiresAt = newExpiresAt === '' ? undefined : new Date(newExpiresAt);
            }

            await urlEntry.save();

            res.json({ message: 'Target URL and settings updated successfully.', updatedUrl: urlEntry.longUrl });

        } catch (err) {
            console.error('Error updating target URL from admin:', err);
            res.status(500).json({ error: 'Server error during updating target URL.' });
        }
    }
];

// =============================================================================
// controllers/feedbackController.js - 處理意見回饋邏輯 (新檔案)
// =============================================================================

// 這個部分應該放在 controllers/feedbackController.js 檔案中
const Feedback = require('../models/Feedback');
const validator = require('validator');

exports.submitFeedback = async (req, res) => {
    const { message, contactInfo } = req.body;

    if (!message || message.trim().length === 0) {
        return res.status(400).json({ error: 'Feedback message cannot be empty.' });
    }

    if (message.length > 500) {
        return res.status(400).json({ error: 'Feedback message exceeds maximum length of 500 characters.' });
    }

    if (contactInfo && contactInfo.length > 100) {
        return res.status(400).json({ error: 'Contact information exceeds maximum length of 100 characters.' });
    }

    try {
        const newFeedback = new Feedback({
            message: message.trim(),
            contactInfo: contactInfo ? contactInfo.trim() : undefined
        });

        await newFeedback.save();
        res.status(201).json({ message: 'Feedback submitted successfully! Thank you for your input.' });

    } catch (err) {
        console.error('Error submitting feedback:', err);
        res.status(500).json({ error: 'Server error during feedback submission.' });
    }
};

// =============================================================================
// public/index.html - 前端 HTML 頁面 (縮網址主頁)
// 僅包含縮網址功能
// =============================================================================

/*
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>我的縮網址系統</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body { font-family: 'Inter', Arial, sans-serif; margin: 0; padding: 20px; background-color: #f0f2f5; display: flex; justify-content: center; align-items: flex-start; min-height: 100vh; }
        .container {
            background: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 700px;
            box-sizing: border-box;
            position: relative; /* For feedback button positioning */
        }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; color: #555; font-weight: bold; }
        input[type="text"], input[type="url"], input[type="password"], input[type="datetime-local"], textarea {
            width: calc(100% - 24px);
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }
        input[type="text"]:focus, input[type="url"]:focus, input[type="password"]:focus, input[type="datetime-local"]:focus, textarea:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 17px;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            width: 100%;
            margin-bottom: 10px; /* Add margin for multiple buttons */
        }
        button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        .result {
            margin-top: 25px;
            padding: 15px;
            background-color: #e9f7ff;
            border: 1px solid #cceeff;
            border-radius: 8px;
            font-size: 15px;
            color: #333;
            word-wrap: break-word;
        }
        .result a { color: #007bff; text-decoration: none; font-weight: bold; }
        .result a:hover { text-decoration: underline; }
        .error-message {
            color: #dc3545;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 15px;
            font-size: 14px;
        }
        .success-message {
            color: #28a745;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 15px;
            font-size: 14px;
        }
        .admin-info {
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            font-size: 0.95em;
            color: #856404;
        }
        .admin-info p { margin-bottom: 5px; }
        .admin-info strong { color: #664d03; }

        /* Footer styles */
        .footer {
            margin-top: 40px;
            text-align: center;
            color: #777;
            font-size: 0.9em;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
        }
        .footer a {
            color: #007bff;
            text-decoration: none;
            margin: 0 10px;
            transition: color 0.3s ease;
        }
        .footer a:hover {
            color: #0056b3;
            text-decoration: underline;
        }
        .footer .social-icon {
            font-size: 1.5em;
            vertical-align: middle;
            margin-right: 5px;
        }
        .sponsor-section {
            margin-top: 30px;
            padding: 20px;
            background-color: #e6f7ff;
            border: 1px solid #a8d7ff;
            border-radius: 8px;
            text-align: center;
        }
        .sponsor-section h2 {
            color: #007bff;
            margin-bottom: 15px;
        }
        .sponsor-section p {
            margin-bottom: 10px;
            line-height: 1.6;
        }
        .sponsor-section a {
            display: inline-block;
            background-color: #28a745;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            margin: 10px 5px;
            transition: background-color 0.3s ease;
        }
        .sponsor-section a:hover {
            background-color: #218838;
        }

        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 500px;
            position: relative;
            animation: fadeInModal 0.3s ease-out;
        }
        .close-button {
            color: #aaa;
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        @keyframes fadeInModal {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .container { margin: 10px; padding: 20px; }
            input, button, textarea { font-size: 14px; padding: 10px; }
            .footer a { margin: 0 5px; }
            .footer .social-icon { font-size: 1.2em; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>縮網址</h1>

        <div class="form-group">
            <label for="longUrlInput">長網址:</label>
            <input type="url" id="longUrlInput" placeholder="輸入要縮短的長網址 (e.g., https://example.com/very/long/url)" required>
        </div>
        <div class="form-group">
            <label for="customShortIdInput">自訂短網址路徑 (可選, 最多10字):</label>
            <input type="text" id="customShortIdInput" placeholder="e.g., my-link">
        </div>
        <div class="form-group">
            <label for="expiresAtInput">到期時間 (可選):</label>
            <input type="datetime-local" id="expiresAtInput">
        </div>
        <div class="form-group">
            <label for="passwordInput">公開密碼保護 (可選):</label>
            <input type="password" id="passwordInput" placeholder="用戶訪問時需要輸入的密碼">
        </div>
        <!-- 管理密碼將由後端自動生成，並在結果中顯示 -->
        <button onclick="shortenUrl()">縮短網址</button>
        <div id="shortenResult" class="result"></div>

        <!-- Sponsor Section -->
        <div class="sponsor-section">
            <h2>贊助我們</h2>
            <p>如果您喜歡這個服務並希望支持我們的開發，請考慮贊助我們！您的支持是我們持續改進的動力。</p>
            <a href="https://github.com/sponsors/your-github-profile" target="_blank">
                <i class="fas fa-heart"></i> GitHub 贊助
            </a>
            <a href="https://ko-fi.com/yourprofile" target="_blank">
                <i class="fas fa-coffee"></i> Buy Me a Coffee
            </a>
            <a href="https://patreon.com/yourprofile" target="_blank">
                <i class="fab fa-patreon"></i> Patreon
            </a>
            <p>感謝您的慷慨！</p>
        </div>

        <!-- Footer with GitHub and Feedback -->
        <div class="footer">
            <a href="https://github.com/your-username/url-redirect-and-shortener" target="_blank" title="GitHub 專案">
                <i class="fab fa-github social-icon"></i> GitHub 開源
            </a>
            <button class="link-button" onclick="openFeedbackModal()">意見回饋</button>
            <p>&copy; 2025 我的縮網址系統. All rights reserved.</p>
        </div>
    </div>

    <!-- Feedback Modal -->
    <div id="feedbackModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeFeedbackModal()">&times;</span>
            <h2>意見回饋</h2>
            <div class="form-group">
                <label for="feedbackMessage">您的意見:</label>
                <textarea id="feedbackMessage" rows="5" placeholder="請輸入您的意見或建議 (最多 500 字元)" required></textarea>
            </div>
            <div class="form-group">
                <label for="contactInfo">聯絡方式 (可選):</label>
                <input type="text" id="contactInfo" placeholder="您的 Email 或其他聯絡方式 (最多 100 字元)">
            </div>
            <button onclick="submitFeedback()">提交意見</button>
            <div id="feedbackResult" class="result"></div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>
*/

// =============================================================================
// public/script.js - 前端 JavaScript 邏輯 (縮網址主頁)
// 僅處理縮網址功能
// =============================================================================

/*
document.addEventListener('DOMContentLoaded', () => {
    // 預設將到期時間設為一個月後
    const expiresAtInput = document.getElementById('expiresAtInput');
    if (expiresAtInput) {
        const now = new Date();
        now.setMonth(now.getMonth() + 1); // 設定為一個月後
        // 格式化為儼-MM-DDTHH:MM，符合 datetime-local 輸入框的要求
        expiresAtInput.value = now.toISOString().slice(0, 16);
    }
});

async function shortenUrl() {
    const longUrl = document.getElementById('longUrlInput').value;
    const customShortId = document.getElementById('customShortIdInput').value;
    const expiresAt = document.getElementById('expiresAtInput').value;
    const password = document.getElementById('passwordInput').value;
    const resultDiv = document.getElementById('shortenResult');
    resultDiv.innerHTML = ''; // 清空之前結果

    if (!longUrl) {
        resultDiv.innerHTML = '<p class="error-message">請輸入長網址。</p>';
        return;
    }

    // 前端驗證 customShortId 長度
    if (customShortId && (customShortId.length > 10 || customShortId.length === 0)) {
        resultDiv.innerHTML = '<p class="error-message">自訂短網址路徑必須是 1 到 10 個字元。</p>';
        return;
    }

    try {
        const response = await fetch('/api/shorten', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                longUrl,
                customShortId: customShortId || undefined,
                expiresAt: expiresAt || undefined,
                password: password || undefined
            })
        });

        const data = await response.json();

        if (response.ok) {
            resultDiv.innerHTML = `
                <p class="success-message">短網址已成功生成！</p>
                <p><strong>縮短後的網址:</strong> <a href="${data.shortUrl}" target="_blank">${data.shortUrl}</a></p>
                <div class="admin-info">
                    <p><strong>後台管理資訊 (請務必妥善保存):</strong></p>
                    <p><strong>短網址 ID:</strong> <code>${data.shortId}</code></p>
                    <p><strong>管理密碼:</strong> <code>${data.managementPassword}</code></p>
                    <p>您可以前往 <a href="${data.adminUrl}?shortId=${data.shortId}&managementPassword=${data.managementPassword}" target="_blank">後台管理介面</a> 輸入上述資訊進行管理。</p>
                </div>
            `;
            // 清空輸入框
            document.getElementById('longUrlInput').value = '';
            document.getElementById('customShortIdInput').value = '';
            document.getElementById('passwordInput').value = '';
            // 重設到期時間
            const expiresAtInput = document.getElementById('expiresAtInput');
            const now = new Date();
            now.setMonth(now.getMonth() + 1);
            expiresAtInput.value = now.toISOString().slice(0, 16);
        } else {
            resultDiv.innerHTML = `<p class="error-message">錯誤: ${data.error || '未知錯誤'}</p>`;
        }
    } catch (error) {
        console.error('縮網址請求失敗:', error);
        resultDiv.innerHTML = '<p class="error-message">網路或伺服器錯誤，請檢查控制台。</p>';
    }
}

// Feedback Modal Functions
const feedbackModal = document.getElementById('feedbackModal');
const feedbackMessageInput = document.getElementById('feedbackMessage');
const contactInfoInput = document.getElementById('contactInfo');
const feedbackResultDiv = document.getElementById('feedbackResult');

function openFeedbackModal() {
    feedbackModal.style.display = 'flex'; // Use flex to center content
    feedbackMessageInput.value = '';
    contactInfoInput.value = '';
    feedbackResultDiv.innerHTML = '';
}

function closeFeedbackModal() {
    feedbackModal.style.display = 'none';
}

// Close modal when clicking outside of it
window.onclick = function(event) {
    if (event.target == feedbackModal) {
        closeFeedbackModal();
    }
}

async function submitFeedback() {
    const message = feedbackMessageInput.value;
    const contactInfo = contactInfoInput.value;
    feedbackResultDiv.innerHTML = '';

    if (!message || message.trim().length === 0) {
        feedbackResultDiv.innerHTML = '<p class="error-message">意見回饋訊息不能為空。</p>';
        return;
    }
    if (message.length > 500) {
        feedbackResultDiv.innerHTML = '<p class="error-message">意見回饋訊息超過 500 個字元的限制。</p>';
        return;
    }
    if (contactInfo && contactInfo.length > 100) {
        feedbackResultDiv.innerHTML = '<p class="error-message">聯絡方式超過 100 個字元的限制。</p>';
        return;
    }

    try {
        const response = await fetch('/api/feedback', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message, contactInfo })
        });

        const data = await response.json();

        if (response.ok) {
            feedbackResultDiv.innerHTML = `<p class="success-message">${data.message}</p>`;
            // Optionally close modal after a short delay
            setTimeout(() => {
                closeFeedbackModal();
            }, 2000);
        } else {
            feedbackResultDiv.innerHTML = `<p class="error-message">錯誤: ${data.error || '提交意見失敗'}</p>`;
        }
    } catch (error) {
        console.error('提交意見請求失敗:', error);
        feedbackResultDiv.innerHTML = '<p class="error-message">網路或伺服器錯誤，請檢查控制台。</p>';
    }
}
*/

// =============================================================================
// public/admin.html - 後台管理介面 HTML (新增)
// 用於登入和管理縮網址
// =============================================================================

/*
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>縮網址後台管理</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body { font-family: 'Inter', Arial, sans-serif; margin: 0; padding: 20px; background-color: #f0f2f5; display: flex; justify-content: center; align-items: flex-start; min-height: 100vh; }
        .container {
            background: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 800px;
            box-sizing: border-box;
        }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; color: #555; font-weight: bold; }
        input[type="text"], input[type="url"], input[type="password"], input[type="datetime-local"], select {
            width: calc(100% - 24px);
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }
        input[type="text"]:focus, input[type="url"]:focus, input[type="password"]:focus, input[type="datetime-local"]:focus, select:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 17px;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            width: 100%;
        }
        button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        .result, .error-message, .success-message {
            margin-top: 25px;
            padding: 15px;
            border-radius: 8px;
            font-size: 15px;
            word-wrap: break-word;
        }
        .result { background-color: #e9f7ff; border: 1px solid #cceeff; color: #333; }
        .error-message { color: #dc3545; background-color: #f8d7da; border: 1px solid #f5c6cb; }
        .success-message { color: #28a745; background-color: #d4edda; border: 1px solid #c3e6cb; }
        .result a { color: #007bff; text-decoration: none; font-weight: bold; }
        .result a:hover { text-decoration: underline; }

        #admin-panel { display: none; margin-top: 30px; }
        .tabs { display: flex; margin-bottom: 20px; border-bottom: 2px solid #e0e0e0; }
        .tab-button {
            flex: 1;
            padding: 12px 0;
            cursor: pointer;
            border: none;
            background-color: transparent;
            font-size: 16px;
            color: #555;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            border-radius: 8px 8px 0 0;
        }
        .tab-button:hover { background-color: #f7f7f7; }
        .tab-button.active {
            color: #007bff;
            border-bottom: 3px solid #007bff;
            font-weight: bold;
            background-color: #fff;
        }
        .tab-content { padding: 20px 0; display: none; animation: fadeIn 0.5s ease-out; }
        .tab-content.active { display: block; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .section-header {
            font-size: 1.3em;
            color: #444;
            margin-top: 20px;
            margin-bottom: 15px;
            padding-bottom: 5px;
            border-bottom: 1px solid #eee;
        }
        ul { list-style: none; padding: 0; }
        ul li { background-color: #f8f9fa; margin-bottom: 8px; padding: 10px; border-radius: 5px; border: 1px solid #e9ecef; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .chart-container {
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
            background-color: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        /* Footer styles */
        .footer {
            margin-top: 40px;
            text-align: center;
            color: #777;
            font-size: 0.9em;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
        }
        .footer a {
            color: #007bff;
            text-decoration: none;
            margin: 0 10px;
            transition: color 0.3s ease;
        }
        .footer a:hover {
            color: #0056b3;
            text-decoration: underline;
        }
        .footer .social-icon {
            font-size: 1.5em;
            vertical-align: middle;
            margin-right: 5px;
        }
        @media (max-width: 768px) {
            .container { margin: 10px; padding: 20px; }
            input, button { font-size: 14px; padding: 10px; }
            .footer a { margin: 0 5px; }
            .footer .social-icon { font-size: 1.2em; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>縮網址後台管理</h1>

        <div id="admin-login">
            <h2 class="section-header">登入後台</h2>
            <div class="form-group">
                <label for="loginShortId">短網址 ID:</label>
                <input type="text" id="loginShortId" placeholder="輸入短網址 ID" required>
            </div>
            <div class="form-group">
                <label for="loginManagementPassword">管理密碼:</label>
                <input type="password" id="loginManagementPassword" placeholder="輸入管理密碼" required>
            </div>
            <button onclick="loginAdmin()">登入</button>
            <div id="loginResult" class="result"></div>
        </div>

        <div id="admin-panel">
            <div class="tabs">
                <button class="tab-button active" onclick="openAdminTab(event, 'update-settings')">更新設定</button>
                <button class="tab-button" onclick="openAdminTab(event, 'traffic-analysis')">流量分析</button>
            </div>

            <div id="update-settings" class="tab-content active">
                <h2 class="section-header">更新縮網址設定</h2>
                <div class="form-group">
                    <label for="updateLongUrl">新的目標網址:</label>
                    <input type="url" id="updateLongUrl" placeholder="輸入新的目標網址" required>
                </div>
                <div class="form-group">
                    <label for="updatePassword">新的公開密碼保護 (留空則移除):</label>
                    <input type="password" id="updatePassword" placeholder="用戶訪問時需要輸入的密碼">
                </div>
                <div class="form-group">
                    <label for="updateExpiresAt">新的到期時間 (留空則移除):</label>
                    <input type="datetime-local" id="updateExpiresAt">
                </div>
                <button onclick="updateShortUrlSettings()">更新設定</button>
                <div id="updateSettingsResult" class="result"></div>
            </div>

            <div id="traffic-analysis" class="tab-content">
                <h2 class="section-header">流量分析</h2>
                <p><strong>當前縮網址:</strong> <span id="currentShortUrlDisplay"></span></p>
                <p><strong>原始目標網址:</strong> <span id="originalLongUrlDisplay"></span></p>
                <p><strong>總點擊數:</strong> <span id="totalClicksDisplay"></span></p>
                <p><strong>創建時間:</strong> <span id="createdAtDisplay"></span></p>
                <p><strong>到期時間:</strong> <span id="expiresAtDisplay"></span></p>
                <p><strong>公開密碼保護:</strong> <span id="passwordProtectedDisplay"></span></p>

                <h3 class="section-header">最近點擊紀錄 (最多 50 筆)</h3>
                <div id="recentClicksList"></div>

                <h3 class="section-header">流量分佈圖表</h3>
                <div class="chart-container">
                    <canvas id="countryChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="deviceTypeChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="osChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="browserChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="referrerChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Footer with GitHub -->
        <div class="footer">
            <a href="https://github.com/your-username/url-redirect-and-shortener" target="_blank" title="GitHub 專案">
                <i class="fab fa-github social-icon"></i> GitHub 開源
            </a>
            <p>&copy; 2025 我的縮網址系統. All rights reserved.</p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/admin.js"></script>
</body>
</html>
*/

// =============================================================================
// public/admin.js - 後台管理介面 JavaScript 邏輯 (新增)
// 處理後台登入、數據顯示和更新
// =============================================================================

/*
let currentShortId = '';
let currentManagementPassword = '';

document.addEventListener('DOMContentLoaded', () => {
    // 嘗試從 URL 參數獲取 shortId 和 managementPassword (如果從縮網址結果頁面點擊過來)
    const urlParams = new URLSearchParams(window.location.search);
    const initialShortId = urlParams.get('shortId');
    const initialManagementPassword = urlParams.get('managementPassword');

    if (initialShortId && initialManagementPassword) {
        document.getElementById('loginShortId').value = initialShortId;
        document.getElementById('loginManagementPassword').value = initialManagementPassword;
        // 可以自動觸發登入，但為了安全，讓用戶手動點擊登入按鈕
        // loginAdmin();
    }

    // 初始化時顯示第一個 Tab
    openAdminTab(null, 'update-settings');
});

function openAdminTab(evt, tabName) {
    var i, tabContent, tabButtons;
    tabContent = document.getElementsByClassName("tab-content");
    for (i = 0; i < tabContent.length; i++) {
        tabContent[i].style.display = "none";
        tabContent[i].classList.remove('active');
    }
    tabButtons = document.getElementsByClassName("tab-button");
    for (i = 0; i < tabButtons.length; i++) {
        tabButtons[i].classList.remove("active");
    }
    document.getElementById(tabName).style.display = "block";
    document.getElementById(tabName).classList.add('active');
    if (evt) {
        evt.currentTarget.classList.add("active");
    } else {
        document.querySelector('.tab-button').classList.add('active');
    }

    // 如果切換到流量分析頁面，且已登入，則重新載入數據
    if (tabName === 'traffic-analysis' && currentShortId) {
        fetchAdminDetails();
    }
}

async function loginAdmin() {
    const loginShortId = document.getElementById('loginShortId').value;
    const loginManagementPassword = document.getElementById('loginManagementPassword').value;
    const loginResultDiv = document.getElementById('loginResult');
    loginResultDiv.innerHTML = '';

    if (!loginShortId || !loginManagementPassword) {
        loginResultDiv.innerHTML = '<p class="error-message">請輸入短網址 ID 和管理密碼。</p>';
        return;
    }

    try {
        const response = await fetch(`/api/admin/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ shortId: loginShortId, managementPassword: loginManagementPassword })
        });

        const data = await response.json();

        if (response.ok) {
            currentShortId = loginShortId;
            currentManagementPassword = loginManagementPassword;
            document.getElementById('admin-login').style.display = 'none';
            document.getElementById('admin-panel').style.display = 'block';
            loginResultDiv.innerHTML = '<p class="success-message">登入成功！</p>';
            fetchAdminDetails(); // 登入成功後立即獲取數據
        } else {
            loginResultDiv.innerHTML = `<p class="error-message">錯誤: ${data.error || '登入失敗'}</p>`;
        }
    } catch (error) {
        console.error('登入請求失敗:', error);
        loginResultDiv.innerHTML = '<p class="error-message">網路或伺服器錯誤。</p>';
    }
}

async function fetchAdminDetails() {
    if (!currentShortId || !currentManagementPassword) {
        console.error('未登入或缺少憑證。');
        return;
    }

    try {
        const response = await fetch(`/api/admin/details/${currentShortId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ managementPassword: currentManagementPassword })
        });

        const data = await response.json();

        if (response.ok) {
            displayTrafficAnalysis(data);
            // 更新更新設定頁面的預設值
            document.getElementById('updateLongUrl').value = data.longUrl;
            document.getElementById('updatePassword').value = data.passwordProtected ? '已設定密碼' : ''; // 不顯示實際密碼
            if (data.expiresAt) {
                document.getElementById('updateExpiresAt').value = new Date(data.expiresAt).toISOString().slice(0, 16);
            } else {
                document.getElementById('updateExpiresAt').value = '';
            }

        } else {
            alert(`獲取數據錯誤: ${data.error || '未知錯誤'}`);
            console.error('獲取數據錯誤:', data.error);
        }
    } catch (error) {
        console.error('獲取數據請求失敗:', error);
        alert('網路或伺服器錯誤，請檢查控制台。');
    }
}

async function updateShortUrlSettings() {
    const updateLongUrl = document.getElementById('updateLongUrl').value;
    const updatePassword = document.getElementById('updatePassword').value;
    const updateExpiresAt = document.getElementById('updateExpiresAt').value;
    const updateSettingsResultDiv = document.getElementById('updateSettingsResult');
    updateSettingsResultDiv.innerHTML = '';

    if (!updateLongUrl) {
        updateSettingsResultDiv.innerHTML = '<p class="error-message">新的目標網址是必填的。</p>';
        return;
    }

    try {
        const response = await fetch(`/api/admin/update/${currentShortId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                managementPassword: currentManagementPassword,
                newLongUrl: updateLongUrl,
                newPassword: updatePassword,
                newExpiresAt: updateExpiresAt
            })
        });

        const data = await response.json();

        if (response.ok) {
            updateSettingsResultDiv.innerHTML = `<p class="success-message">${data.message}</p>`;
            fetchAdminDetails(); // 更新後重新獲取數據以顯示最新狀態
        } else {
            updateSettingsResultDiv.innerHTML = `<p class="error-message">錯誤: ${data.error || '更新失敗'}</p>`;
        }
    } catch (error) {
        console.error('更新設定請求失敗:', error);
        updateSettingsResultDiv.innerHTML = '<p class="error-message">網路或伺服器錯誤。</p>';
    }
}

// Chart.js 實例，用於銷毀和重新創建圖表
let charts = {};
const chartColors = [
    'rgba(255, 99, 132, 0.7)', 'rgba(54, 162, 235, 0.7)', 'rgba(255, 206, 86, 0.7)',
    'rgba(75, 192, 192, 0.7)', 'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)',
    'rgba(199, 199, 199, 0.7)', 'rgba(83, 102, 255, 0.7)', 'rgba(255, 99, 255, 0.7)'
];
const chartBorderColors = [
    'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',
    'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)',
    'rgba(199, 199, 199, 1)', 'rgba(83, 102, 255, 1)', 'rgba(255, 99, 255, 1)'
];


function displayTrafficAnalysis(data) {
    document.getElementById('currentShortUrlDisplay').textContent = `${window.location.origin}/${currentShortId}`;
    document.getElementById('originalLongUrlDisplay').textContent = data.longUrl;
    document.getElementById('totalClicksDisplay').textContent = data.totalClicks;
    document.getElementById('createdAtDisplay').textContent = new Date(data.createdAt).toLocaleString();
    document.getElementById('expiresAtDisplay').textContent = data.expiresAt ? new Date(data.expiresAt).toLocaleString() : '無設定';
    document.getElementById('passwordProtectedDisplay').textContent = data.passwordProtected ? '是' : '否';

    const recentClicksList = document.getElementById('recentClicksList');
    recentClicksList.innerHTML = '';
    if (data.recentClicks && data.recentClicks.length > 0) {
        const ul = document.createElement('ul');
        data.recentClicks.forEach(click => {
            const li = document.createElement('li');
            li.innerHTML = `
                <strong>時間:</strong> ${new Date(click.timestamp).toLocaleString()}<br>
                <strong>IP:</strong> ${click.ipAddress}<br>
                <strong>國家/城市:</strong> ${click.country} ${click.city ? `(${click.city})` : ''}<br>
                <strong>裝置:</strong> ${click.deviceType} (${click.os})<br>
                <strong>瀏覽器:</strong> ${click.browser}<br>
                <strong>來源:</strong> ${click.referrer || '直接訪問'}
            `;
            ul.appendChild(li);
        });
        recentClicksList.appendChild(ul);
    } else {
        recentClicksList.innerHTML = '<p>目前沒有點擊紀錄。</p>';
    }

    // 繪製圖表
    renderChart('countryChart', '國家分佈', data.countryDistribution);
    renderChart('deviceTypeChart', '裝置類型分佈', data.deviceTypeDistribution);
    renderChart('osChart', '作業系統分佈', data.osDistribution);
    renderChart('browserChart', '瀏覽器分佈', data.browserDistribution);
    renderChart('referrerChart', '流量來源分佈', data.referrerDistribution);
}

function renderChart(canvasId, title, data) {
    const ctx = document.getElementById(canvasId);
    if (!ctx) return;

    // 如果圖表已存在，先銷毀它
    if (charts[canvasId]) {
        charts[canvasId].destroy();
    }

    const labels = Object.keys(data);
    const values = Object.values(data);

    charts[canvasId] = new Chart(ctx, {
        type: 'pie', // 可以根據數據類型選擇 'bar', 'doughnut' 等
        data: {
            labels: labels,
            datasets: [{
                label: title,
                data: values,
                backgroundColor: chartColors.slice(0, labels.length),
                borderColor: chartBorderColors.slice(0, labels.length),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: title
                }
            }
        }
    });
}
*/

// =============================================================================
// public/password_prompt.html - 公開密碼輸入頁面 HTML (新增)
// 用於有密碼保護的縮網址
// =============================================================================

/*
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>輸入密碼</title>
    <style>
        body { font-family: 'Inter', Arial, sans-serif; margin: 0; padding: 20px; background-color: #f0f2f5; display: flex; justify-content: center; align-items: center; min-height: 100vh; }
        .container {
            background: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
            box-sizing: border-box;
            text-align: center;
        }
        h1 { color: #333; margin-bottom: 20px; }
        p { color: #555; margin-bottom: 25px; }
        input[type="password"] {
            width: calc(100% - 24px);
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }
        input[type="password"]:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.2);
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 17px;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            width: 100%;
        }
        button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        .error-message {
            color: #dc3545;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 6px;
            margin-top: 15px;
            font-size: 14px;
        }
        @media (max-width: 768px) {
            .container { margin: 10px; padding: 20px; }
            input, button { font-size: 14px; padding: 10px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>此連結受密碼保護</h1>
        <p>請輸入密碼以繼續訪問。</p>
        <input type="password" id="passwordInput" placeholder="輸入密碼" required>
        <button onclick="submitPassword()">提交</button>
        <div id="message" class="error-message" style="display:none;"></div>
    </div>

    <script src="/password_prompt.js"></script>
</body>
</html>
*/

// =============================================================================
// public/password_prompt.js - 公開密碼輸入頁面 JavaScript 邏輯 (新增)
// 處理公開密碼的提交和驗證
// =============================================================================

/*
document.addEventListener('DOMContentLoaded', () => {
    // 獲取 URL 中的 shortId
    const pathSegments = window.location.pathname.split('/');
    const shortId = pathSegments[pathSegments.length - 1]; // 應該是 /verify/:shortId
    if (shortId) {
        // 可以將 shortId 儲存起來，以便提交時使用
        document.body.dataset.shortId = shortId;
    } else {
        document.getElementById('message').textContent = '無效的連結。';
        document.getElementById('message').style.display = 'block';
    }
});

async function submitPassword() {
    const password = document.getElementById('passwordInput').value;
    const messageDiv = document.getElementById('message');
    const shortId = document.body.dataset.shortId; // 從 data-屬性獲取 shortId
    messageDiv.innerHTML = '';
    messageDiv.style.display = 'none';

    if (!password) {
        messageDiv.innerHTML = '請輸入密碼。';
        messageDiv.style.display = 'block';
        return;
    }

    try {
        const response = await fetch(`/api/verify-password/${shortId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ password })
        });

        const data = await response.json();

        if (response.ok && data.success) {
            window.location.replace(data.redirectUrl); // 驗證成功，轉址
        } else {
            messageDiv.innerHTML = data.error || '密碼錯誤。';
            messageDiv.style.display = 'block';
        }
    } catch (error) {
        console.error('密碼驗證請求失敗:', error);
        messageDiv.innerHTML = '網路或伺服器錯誤，請檢查控制台。';
        messageDiv.style.display = 'block';
    }
}
*/

// =============================================================================
// package.json - 專案依賴和 npm scripts (已更新)
// =============================================================================

/*
{
  "name": "shorturl-system",
  "version": "1.0.0",
  "description": "A URL shortening system with admin and password protection features.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.19.2",
    "geoip-lite": "^1.4.6",
    "mongoose": "^8.4.3",
    "shortid": "^2.2.16",
    "useragent-parser": "^0.9.1",
    "validator": "^13.12.0",
    "crypto": "^1.0.1"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}
*/

// =============================================================================
// docker-compose.yml - 用於定義和運行多容器 Docker 應用程式 (已更新為直接使用 Node.js Image)
// =============================================================================

/*
version: '3.8'

services:
  app:
    image: node:22-alpine
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  mongodb_data:
*/
